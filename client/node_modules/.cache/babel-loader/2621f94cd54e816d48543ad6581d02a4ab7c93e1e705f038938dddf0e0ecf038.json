{"ast":null,"code":"var __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport { CLEANUP_TIMER_LOOP_MILLIS, createTrackingData } from \"./reactionCleanupTrackingCommon\";\n/**\r\n * timers, gc-style, uncommitted reaction cleanup\r\n */\nexport function createTimerBasedReactionCleanupTracking() {\n  /**\r\n   * Reactions created by components that have yet to be fully mounted.\r\n   */\n  var uncommittedReactionRefs = new Set();\n  /**\r\n   * Latest 'uncommitted reactions' cleanup timer handle.\r\n   */\n  var reactionCleanupHandle;\n  /* istanbul ignore next */\n  /**\r\n   * Only to be used by test functions; do not export outside of mobx-react-lite\r\n   */\n  function forceCleanupTimerToRunNowForTests() {\n    // This allows us to control the execution of the cleanup timer\n    // to force it to run at awkward times in unit tests.\n    if (reactionCleanupHandle) {\n      clearTimeout(reactionCleanupHandle);\n      cleanUncommittedReactions();\n    }\n  }\n  /* istanbul ignore next */\n  function resetCleanupScheduleForTests() {\n    var e_1, _a;\n    if (uncommittedReactionRefs.size > 0) {\n      try {\n        for (var uncommittedReactionRefs_1 = __values(uncommittedReactionRefs), uncommittedReactionRefs_1_1 = uncommittedReactionRefs_1.next(); !uncommittedReactionRefs_1_1.done; uncommittedReactionRefs_1_1 = uncommittedReactionRefs_1.next()) {\n          var ref = uncommittedReactionRefs_1_1.value;\n          var tracking = ref.current;\n          if (tracking) {\n            tracking.reaction.dispose();\n            ref.current = null;\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (uncommittedReactionRefs_1_1 && !uncommittedReactionRefs_1_1.done && (_a = uncommittedReactionRefs_1.return)) _a.call(uncommittedReactionRefs_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      uncommittedReactionRefs.clear();\n    }\n    if (reactionCleanupHandle) {\n      clearTimeout(reactionCleanupHandle);\n      reactionCleanupHandle = undefined;\n    }\n  }\n  function ensureCleanupTimerRunning() {\n    if (reactionCleanupHandle === undefined) {\n      reactionCleanupHandle = setTimeout(cleanUncommittedReactions, CLEANUP_TIMER_LOOP_MILLIS);\n    }\n  }\n  function scheduleCleanupOfReactionIfLeaked(ref) {\n    uncommittedReactionRefs.add(ref);\n    ensureCleanupTimerRunning();\n  }\n  function recordReactionAsCommitted(reactionRef) {\n    uncommittedReactionRefs.delete(reactionRef);\n  }\n  /**\r\n   * Run by the cleanup timer to dispose any outstanding reactions\r\n   */\n  function cleanUncommittedReactions() {\n    reactionCleanupHandle = undefined;\n    // Loop through all the candidate leaked reactions; those older\n    // than CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS get tidied.\n    var now = Date.now();\n    uncommittedReactionRefs.forEach(function (ref) {\n      var tracking = ref.current;\n      if (tracking) {\n        if (now >= tracking.cleanAt) {\n          // It's time to tidy up this leaked reaction.\n          tracking.reaction.dispose();\n          ref.current = null;\n          uncommittedReactionRefs.delete(ref);\n        }\n      }\n    });\n    if (uncommittedReactionRefs.size > 0) {\n      // We've just finished a round of cleanups but there are still\n      // some leak candidates outstanding.\n      ensureCleanupTimerRunning();\n    }\n  }\n  return {\n    addReactionToTrack: function (reactionTrackingRef, reaction,\n    /**\r\n     * On timer based implementation we don't really need this object,\r\n     * but we keep the same api\r\n     */\n    objectRetainedByReact) {\n      reactionTrackingRef.current = createTrackingData(reaction);\n      scheduleCleanupOfReactionIfLeaked(reactionTrackingRef);\n      return reactionTrackingRef.current;\n    },\n    recordReactionAsCommitted: recordReactionAsCommitted,\n    forceCleanupTimerToRunNowForTests: forceCleanupTimerToRunNowForTests,\n    resetCleanupScheduleForTests: resetCleanupScheduleForTests\n  };\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AACA,SAGIA,yBAAyB,EACzBC,kBAAkB,QACf,iCAAiC;AAExC;;;AAGA,OAAM,SAAUC,uCAAuC;EACnD;;;EAGA,IAAMC,uBAAuB,GAA0D,IAAIC,GAAG,EAAE;EAEhG;;;EAGA,IAAIC,qBAAgE;EAEpE;EACA;;;EAGA,SAASC,iCAAiC;IACtC;IACA;IACA,IAAID,qBAAqB,EAAE;MACvBE,YAAY,CAACF,qBAAqB,CAAC;MACnCG,yBAAyB,EAAE;;EAEnC;EAEA;EACA,SAASC,4BAA4B;;IACjC,IAAIN,uBAAuB,CAACO,IAAI,GAAG,CAAC,EAAE;;QAClC,KAAkB,gEAAuB,sKAAE;UAAtC,IAAMC,GAAG;UACV,IAAMC,QAAQ,GAAGD,GAAG,CAACE,OAAO;UAC5B,IAAID,QAAQ,EAAE;YACVA,QAAQ,CAACE,QAAQ,CAACC,OAAO,EAAE;YAC3BJ,GAAG,CAACE,OAAO,GAAG,IAAI;;;;;;;;;;;;;;MAG1BV,uBAAuB,CAACa,KAAK,EAAE;;IAGnC,IAAIX,qBAAqB,EAAE;MACvBE,YAAY,CAACF,qBAAqB,CAAC;MACnCA,qBAAqB,GAAGY,SAAS;;EAEzC;EAEA,SAASC,yBAAyB;IAC9B,IAAIb,qBAAqB,KAAKY,SAAS,EAAE;MACrCZ,qBAAqB,GAAGc,UAAU,CAACX,yBAAyB,EAAER,yBAAyB,CAAC;;EAEhG;EAEA,SAASoB,iCAAiC,CACtCT,GAAqD;IAErDR,uBAAuB,CAACkB,GAAG,CAACV,GAAG,CAAC;IAEhCO,yBAAyB,EAAE;EAC/B;EAEA,SAASI,yBAAyB,CAC9BC,WAA6D;IAE7DpB,uBAAuB,CAACqB,MAAM,CAACD,WAAW,CAAC;EAC/C;EAEA;;;EAGA,SAASf,yBAAyB;IAC9BH,qBAAqB,GAAGY,SAAS;IAEjC;IACA;IAEA,IAAMQ,GAAG,GAAGC,IAAI,CAACD,GAAG,EAAE;IACtBtB,uBAAuB,CAACwB,OAAO,CAAC,aAAG;MAC/B,IAAMf,QAAQ,GAAGD,GAAG,CAACE,OAAO;MAC5B,IAAID,QAAQ,EAAE;QACV,IAAIa,GAAG,IAAIb,QAAQ,CAACgB,OAAO,EAAE;UACzB;UACAhB,QAAQ,CAACE,QAAQ,CAACC,OAAO,EAAE;UAC3BJ,GAAG,CAACE,OAAO,GAAG,IAAI;UAClBV,uBAAuB,CAACqB,MAAM,CAACb,GAAG,CAAC;;;IAG/C,CAAC,CAAC;IAEF,IAAIR,uBAAuB,CAACO,IAAI,GAAG,CAAC,EAAE;MAClC;MACA;MACAQ,yBAAyB,EAAE;;EAEnC;EAEA,OAAO;IACHW,kBAAkB,EAAlB,UACIC,mBAAqE,EACrEhB,QAAkB;IAClB;;;;IAIAiB,qBAA8B;MAE9BD,mBAAmB,CAACjB,OAAO,GAAGZ,kBAAkB,CAACa,QAAQ,CAAC;MAC1DM,iCAAiC,CAACU,mBAAmB,CAAC;MACtD,OAAOA,mBAAmB,CAACjB,OAAO;IACtC,CAAC;IACDS,yBAAyB;IACzBhB,iCAAiC;IACjCG,4BAA4B;GAC/B;AACL","names":["CLEANUP_TIMER_LOOP_MILLIS","createTrackingData","createTimerBasedReactionCleanupTracking","uncommittedReactionRefs","Set","reactionCleanupHandle","forceCleanupTimerToRunNowForTests","clearTimeout","cleanUncommittedReactions","resetCleanupScheduleForTests","size","ref","tracking","current","reaction","dispose","clear","undefined","ensureCleanupTimerRunning","setTimeout","scheduleCleanupOfReactionIfLeaked","add","recordReactionAsCommitted","reactionRef","delete","now","Date","forEach","cleanAt","addReactionToTrack","reactionTrackingRef","objectRetainedByReact"],"sources":["D:\\заказы\\onepro\\onepro\\client\\node_modules\\mobx-react-lite\\src\\utils\\createTimerBasedReactionCleanupTracking.ts"],"sourcesContent":["import { Reaction } from \"mobx\"\r\nimport {\r\n    ReactionCleanupTracking,\r\n    IReactionTracking,\r\n    CLEANUP_TIMER_LOOP_MILLIS,\r\n    createTrackingData\r\n} from \"./reactionCleanupTrackingCommon\"\r\n\r\n/**\r\n * timers, gc-style, uncommitted reaction cleanup\r\n */\r\nexport function createTimerBasedReactionCleanupTracking(): ReactionCleanupTracking {\r\n    /**\r\n     * Reactions created by components that have yet to be fully mounted.\r\n     */\r\n    const uncommittedReactionRefs: Set<React.MutableRefObject<IReactionTracking | null>> = new Set()\r\n\r\n    /**\r\n     * Latest 'uncommitted reactions' cleanup timer handle.\r\n     */\r\n    let reactionCleanupHandle: ReturnType<typeof setTimeout> | undefined\r\n\r\n    /* istanbul ignore next */\r\n    /**\r\n     * Only to be used by test functions; do not export outside of mobx-react-lite\r\n     */\r\n    function forceCleanupTimerToRunNowForTests() {\r\n        // This allows us to control the execution of the cleanup timer\r\n        // to force it to run at awkward times in unit tests.\r\n        if (reactionCleanupHandle) {\r\n            clearTimeout(reactionCleanupHandle)\r\n            cleanUncommittedReactions()\r\n        }\r\n    }\r\n\r\n    /* istanbul ignore next */\r\n    function resetCleanupScheduleForTests() {\r\n        if (uncommittedReactionRefs.size > 0) {\r\n            for (const ref of uncommittedReactionRefs) {\r\n                const tracking = ref.current\r\n                if (tracking) {\r\n                    tracking.reaction.dispose()\r\n                    ref.current = null\r\n                }\r\n            }\r\n            uncommittedReactionRefs.clear()\r\n        }\r\n\r\n        if (reactionCleanupHandle) {\r\n            clearTimeout(reactionCleanupHandle)\r\n            reactionCleanupHandle = undefined\r\n        }\r\n    }\r\n\r\n    function ensureCleanupTimerRunning() {\r\n        if (reactionCleanupHandle === undefined) {\r\n            reactionCleanupHandle = setTimeout(cleanUncommittedReactions, CLEANUP_TIMER_LOOP_MILLIS)\r\n        }\r\n    }\r\n\r\n    function scheduleCleanupOfReactionIfLeaked(\r\n        ref: React.MutableRefObject<IReactionTracking | null>\r\n    ) {\r\n        uncommittedReactionRefs.add(ref)\r\n\r\n        ensureCleanupTimerRunning()\r\n    }\r\n\r\n    function recordReactionAsCommitted(\r\n        reactionRef: React.MutableRefObject<IReactionTracking | null>\r\n    ) {\r\n        uncommittedReactionRefs.delete(reactionRef)\r\n    }\r\n\r\n    /**\r\n     * Run by the cleanup timer to dispose any outstanding reactions\r\n     */\r\n    function cleanUncommittedReactions() {\r\n        reactionCleanupHandle = undefined\r\n\r\n        // Loop through all the candidate leaked reactions; those older\r\n        // than CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS get tidied.\r\n\r\n        const now = Date.now()\r\n        uncommittedReactionRefs.forEach(ref => {\r\n            const tracking = ref.current\r\n            if (tracking) {\r\n                if (now >= tracking.cleanAt) {\r\n                    // It's time to tidy up this leaked reaction.\r\n                    tracking.reaction.dispose()\r\n                    ref.current = null\r\n                    uncommittedReactionRefs.delete(ref)\r\n                }\r\n            }\r\n        })\r\n\r\n        if (uncommittedReactionRefs.size > 0) {\r\n            // We've just finished a round of cleanups but there are still\r\n            // some leak candidates outstanding.\r\n            ensureCleanupTimerRunning()\r\n        }\r\n    }\r\n\r\n    return {\r\n        addReactionToTrack(\r\n            reactionTrackingRef: React.MutableRefObject<IReactionTracking | null>,\r\n            reaction: Reaction,\r\n            /**\r\n             * On timer based implementation we don't really need this object,\r\n             * but we keep the same api\r\n             */\r\n            objectRetainedByReact: unknown\r\n        ) {\r\n            reactionTrackingRef.current = createTrackingData(reaction)\r\n            scheduleCleanupOfReactionIfLeaked(reactionTrackingRef)\r\n            return reactionTrackingRef.current\r\n        },\r\n        recordReactionAsCommitted,\r\n        forceCleanupTimerToRunNowForTests,\r\n        resetCleanupScheduleForTests\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}